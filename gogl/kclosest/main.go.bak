package main

import (
	"fmt"
	"sort"
)

func main() {
	fmt.Println(findClosestElements([]int{1, 2, 3, 4, 5}, 4, 3))
	fmt.Println(findClosestElements([]int{2, 4, 5, 6, 9}, 3, 6))

}

func findClosest(nums []int, target int) int {

	if target < nums[0] {
		return nums[0]
	}
	if target > nums[len(nums)-1] {
		return nums[len(nums)-1]
	}
	start := 0
	end := len(nums) - 1
	var middle int

	for start <= end {
		middle = (start + end) / 2
		if nums[middle] == target {
			return nums[middle]
		}
		if target < nums[middle] {
			if middle > 0 && target > nums[middle-1] {
				return getClosest(nums[middle-1], nums[middle], target)
			}
			end = middle - 1
			continue
		}
		if middle < len(nums)-1 && target < nums[middle+1] {
			return getClosest(nums[middle], nums[middle+1], target)
		}
		start = middle + 1
	}

	return nums[middle]
}

func getClosest(val1, val2, target int) int {
	if target-val1 >= val2-target {
		return val2
	}
	return val1
}

func findClosestIndex(nums []int, target int) int {

	if target < nums[0] {
		return 0
	}
	if target > nums[len(nums)-1] {
		return len(nums) - 1
	}
	start := 0
	end := len(nums) - 1
	middle := (start + end) / 2

	for start <= end {
		middle = (start + end) / 2
		if nums[middle] == target {
			return middle
		}
		if target < nums[middle] {
			if middle > 0 && target > nums[middle-1] {
				if target-nums[middle-1] >= nums[middle]-target {
					return middle
				}
				return middle - 1
			}
			end = middle - 1
			continue
		}
		if middle < len(nums)-1 && target < nums[middle+1] {
			if target-nums[middle] >= nums[middle+1]-target {
				return middle + 1
			}
			return middle
		}
		start = middle + 1
	}

	return middle
}

func findClosestElements(nums []int, K, target int) []int {

	if len(nums) <= K {
		return nums
	}

	closestIdx := findClosestIndex(nums, target)
	fmt.Println("closestIdx:", closestIdx)

	result := []int{nums[closestIdx]}

	ptr1 := closestIdx - 1
	ptr2 := closestIdx + 1

	for len(result) < K {
		if ptr1 >= 0 && ptr2 < len(nums) {
			if target-nums[ptr1] < nums[ptr2]-target {
				result = append(result, nums[ptr1])
				ptr1--
				continue
			}
			result = append(result, nums[ptr2])
			ptr2++
			continue
		}
		if ptr1 < 0 {
			result = append(result, nums[ptr2])
			ptr2++
			continue
		}
		result = append(result, nums[ptr1])
		ptr1--
	}

	sort.Ints(result)
	return result
}
