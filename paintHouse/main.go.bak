package main

import "fmt"

func main() {

	// fmt.Println(minCost([][]int{{17, 2, 17}, {16, 16, 5}, {14, 3, 19}}))
	// fmt.Println(minCost([][]int{{7, 6, 2}}))
	fmt.Println(minCost([][]int{{5, 8, 6}, {9, 14, 13}, {7, 5, 12}, {14, 15, 17}, {3, 20, 10}}))
}

func minCost(costs [][]int) int {

	if len(costs) == 0 {
		return 0
	}

	result := make([][]int, len(costs))
	colors := len(costs[0])

	for i := 0; i < len(costs); i++ {
		result[i] = make([]int, colors)
	}

	result[0] = costs[0]

	for i := 1; i < len(costs); i++ {
		for j := 0; j < colors; j++ {
			switch j {
			case 0:
				result[i][j] = min(result[i-1][1], result[i-1][2]) + costs[i][j]
			case 1:
				result[i][j] = min(result[i-1][0], result[i-1][2]) + costs[i][j]
			case 2:
				result[i][j] = min(result[i-1][0], result[i-1][1]) + costs[i][j]
			}
		}
	}

	min := result[len(costs)-1][0]

	for i := 1; i < colors; i++ {
		if result[len(costs)-1][i] < min {
			min = result[len(costs)-1][i]
		}
	}

	fmt.Println(result)
	return min
}

func min(num1, num2 int) int {
	if num1 > num2 {
		return num2
	}
	return num1
}

// steps:
// use DP tabulation
// init m x n matrix
// fill up the first row with costs[0]
// run in loop from 1 up to len(costs)-1
// and then another loop from 0 to 2
// - case 0: min(result[i-1,1],result[i-1,2])
// - case 1: min(result[i-1,0],result[i-1,2])
// - case 2: min(result[i-1,2],result[i-1,3])
// return the min of last row
